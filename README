2017.07.06
之前在学校没有放假的时候，对系统进行短时间内大量提交，发现很多程序运行起来算的时间都T了，在多个请求下，System.currentMillion...的这个方法跪了，所以最近两天采用获取CPU中用户态的时间作为程序的运行时间花费，
但是遇到了对于实际上确实超时的程序无法判断，最近两天在解决这个问题，解决方法①：使用代理模式，对用户上交的Main类进行代理，然后在Main1中进行时间计算。该解决方案不能限制进程的运行时间；解决方法②：还是使用
代理模式，但是在代理类的Around增强中，开一个子线程去执行用户上传的Main类，然后用do...while限制子线程的执行时间，这样既可以获得子线程的CPU运行时间，也可以限制子线程在CPU中的运行时间。出现的问题为，进程的
标准输入流在运行时被关闭。
同时也遇到了一个问题，排序一个1000+以上的数，这时候用原来的代码来解决的话会一直阻塞，后来想到了对子进程的errorStream的处理，就在单元测试中对子进程在控制台输出的输出流作了同样的处理，而不是在主线程中对子进
程的输出流作处理，并且outputStream每一次write()都需要flush()，防止缓冲区变满的情况，之前都能成功都是因为输出内容太少。
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

/**
 * Created by 潘毅烦 on 2017/7/6.
 */
public class Main1 {
    public static void main(String[] args) throws InterruptedException {
        for (int i=0;i<6;i++) {
            new Thread(new SleepTask2()).start();
        }
    }
}
class SleepTask2 implements Runnable{
    @Override
    public void run() {
        try {
            Process p=Runtime.getRuntime().exec("cmd /c java -cp E:\\java\\algorithm\\out\\production\\algorithm Main");
            new Thread(new StreamReader(p.getErrorStream())).start();
            boolean exit=p.waitFor(2,TimeUnit.SECONDS);
            System.out.println(exit);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
class StreamReader implements Runnable{
    private InputStream is;
    public StreamReader(InputStream is){
        this.is=is;
    }
    @Override
    public void run() {
        try {
            while (is.read()!=-1){
            }
        } catch (IOException e) {
        }
    }
}
/**
 * Created by 潘毅烦 on 2017/7/6.
 */
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Thread.sleep(800);
    }
}
